from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from database import db
from models.user import User
from keyboards import get_withdraw_amount_keyboard, get_withdraw_method_keyboard

async def withdraw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_model = User(user.id)
    
    if not user_model.is_active:
        await query.edit_message_text(
            "тЪая╕П ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржкрзНрж░ржержорзЗ ржПржХрж╛ржЙржирзНржЯ ржПржХржЯрж┐ржн ржХрж░рзБржи!\n"
            "ржПржХрж╛ржЙржирзНржЯ ржПржХржЯрж┐ржн ржирж╛ ржХрж░рж▓рзЗ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред"
        )
        return
    
    # Check minimum referrals
    if user_model.referral_count < Config.WITHDRAW_CONDITIONS['min_referrals']:
        await query.edit_message_text(
            f"тЪая╕П ржЙрждрзНрждрзЛрж▓ржирзЗрж░ рж╢рж░рзНржд ржкрзВрж░ржг рж╣ржпрж╝ржирж┐!\n\n"
            f"ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗцЬАх░С {Config.WITHDRAW_CONDITIONS['min_referrals']}ржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржкрзНрж░ржпрж╝рзЛржЬржи\n"
            f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓: {user_model.referral_count}ржЯрж┐\n\n"
            f"рж░рзЗржлрж╛рж░рзЗрж▓ ржмрж╛ржбрж╝рж╛ржирзЛрж░ ржЬржирзНржп /referral ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
        )
        return
    
    if query.data == "withdraw_request":
        await show_withdraw_amounts(query, user_model)
    
    elif query.data.startswith("withdraw_amount_"):
        amount = int(query.data.split("_")[2])
        context.user_data['withdraw_amount'] = amount
        await show_withdraw_methods(query)
    
    elif query.data.startswith("withdraw_method_"):
        method = query.data.split("_")[2]
        context.user_data['withdraw_method'] = method
        await ask_for_account_number(query)

async def show_withdraw_amounts(query, user_model):
    withdraw_count = user_model.withdraw_count
    await query.edit_message_text(
        f"ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи\n\n"
        f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {user_model.balance} points\n"
        f"ЁЯУК ржЙрждрзНрждрзЛрж▓ржи рж╕ржВржЦрзНржпрж╛: {withdraw_count}\n\n"
        f"тЪая╕П рж╕рж░рзНржмржирж┐ржорзНржи ржЙрждрзНрждрзЛрж▓ржи: {Config.WITHDRAW_CONDITIONS['withdraw_min'][min(withdraw_count, 2)]} points\n"
        f"тЪая╕П рж╕рж░рзНржмрзЛржЪрзНржЪ ржЙрждрзНрждрзЛрж▓ржи: {Config.WITHDRAW_CONDITIONS['withdraw_max']} points\n\n"
        f"ржХржд ржкржпрж╝рзЗржирзНржЯ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ ржЪрж╛ржи?",
        reply_markup=get_withdraw_amount_keyboard(user_model.balance, withdraw_count)
    )

async def show_withdraw_methods(query):
    await query.edit_message_text(
        "ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи ржорж╛ржзрзНржпржощАЙцЛй\n\n"
        "ржХрж┐рж╕рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ ржЪрж╛ржи?",
        reply_markup=get_withdraw_method_keyboard()
    )

async def ask_for_account_number(query):
    await query.edit_message_text(
        "ЁЯУ▒ ржПржХрж╛ржЙржирзНржЯ ржиржорзНржмрж░\n\n"
        "ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржиржорзНржмрж░ржЯрж┐ ржкрж╛ржарж╛ржи:\n\n"
        "тЪая╕Пца╝х╝П: 01XXXXXXXXX"
    )

async def withdraw_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    account_number = update.message.text.strip()
    
    if 'withdraw_amount' in context.user_data and 'withdraw_method' in context.user_data:
        amount = context.user_data['withdraw_amount']
        method = context.user_data['withdraw_method']
        
        user_model = User(user_id)
        
        # Validate account number
        if not account_number.startswith('01') or len(account_number) != 11 or not account_number.isdigit():
            await update.message.reply_text(
                "тЭМ ржПржХрж╛ржЙржирзНржЯ ржиржорзНржмрж░ржЯрж┐ рж╕ржарж┐ржХца╝х╝ПуБзуБпуБВуВКуБ╛уБЫуВУ!\n\n"
                "тЪая╕Пца╝х╝П: 01XXXXXXXXX (11ф╜НцХ░хнЧ)\n"
                "ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:"
            )
            return
        
        # Check balance
        if amount > user_model.balance:
            await update.message.reply_text(
                "тЭМ ржЖржкржирж╛рж░ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржирзЗржЗ!\n\n"
                f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {user_model.balance} points\n"
                f"ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи amount: {amount} points\n\n"
                "ржХржо amount рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:"
            )
            return
        
        # Create withdrawal request
        cursor = db.conn.cursor()
        cursor.execute('''
            INSERT INTO withdrawals (user_id, amount, method, account_number)
            VALUES (?, ?, ?, ?)
        ''', (user_id, amount, method, account_number))
        
        # Deduct balance
        cursor.execute('''
            UPDATE users SET balance = balance - ?, withdraw_count = withdraw_count + 1 
            WHERE user_id = ?
        ''', (amount, user_id))
        
        db.conn.commit()
        
        # Notify admin
        await notify_admin_withdrawal(context, user_id, amount, method, account_number)
        
        await update.message.reply_text(
            f"тЬЕ ржЙрждрзНрждрзЛрж▓ржи рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
            f"ЁЯТ░ Amount: {amount} points\n"
            f"ЁЯУ▒ Method: {method.upper()}\n"
            f"ЁЯФв Account: {account_number}\n\n"
            f"тП│ 24 ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ processed рж╣ржмрзЗ\n"
            f"ЁЯУЮ ржХрзЛржирзЛ problem рж╣рж▓рзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи"
        )
        
        # Clear context
        context.user_data.pop('withdraw_amount', None)
        context.user_data.pop('withdraw_method', None)

async def notify_admin_withdrawal(context, user_id, amount, method, account_number):
    user = User(user_id)
    
    message = (
        f"ЁЯФФ ржирждрзБржи ржЙрждрзНрждрзЛрж▓ржи рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ!\n\n"
        f"ЁЯСд User: @{user.username}\n"
        f"ЁЯЖФ ID: {user_id}\n"
        f"ЁЯТ░ Amount: {amount} points\n"
        f"ЁЯУ▒ Method: {method.upper()}\n"
        f"ЁЯФв Account: {account_number}\n"
        f"ЁЯУК ржЙрждрзНрждрзЛрж▓ржи рж╕ржВржЦрзНржпрж╛: {user.withdraw_count + 1}\n\n"
        f"тП░ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("тЬЕ Confirm", callback_data=f"admin_confirm_withdraw_{user_id}"),
            InlineKeyboardButton("тЭМ Reject", callback_data=f"admin_reject_withdraw_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=Config.ADMIN_ID,
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from database import db
from models.user import User
from handlers.admin import send_admin_notification
from keyboards import get_payment_keyboard

async def payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment_activate":
        await query.edit_message_text(
            f"üí≥ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠‡ßá‡¶∂‡¶®\n\n"
            f"‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá {Config.ACTIVATION_AMOUNT}‡ß≥ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶Æ‡¶æ‡¶®‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®\n\n"
            "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=get_payment_keyboard()
        )
    
    elif query.data in ["payment_bkash", "payment_nagad"]:
        method = "bkash" if query.data == "payment_bkash" else "nagad"
        number = Config.BKASH_NUMBER if method == "bkash" else Config.NAGAD_NUMBER
        
        context.user_data['payment_method'] = method
        
        await query.edit_message_text(
            f"üîµ {method.upper()} - {number}\n\n"
            "üí≥ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶üÂÆåÊàêÂêé, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®:\n\n"
            "‚ö†Ô∏è ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®: ‡¶è‡¶ï‡¶á ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø reuse ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ"
        )

async def transaction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    transaction_id = update.message.text.strip()
    
    if 'payment_method' in context.user_data:
        method = context.user_data['payment_method']
        
        if is_valid_transaction(transaction_id):
            cursor = db.conn.cursor()
            cursor.execute('''
                INSERT INTO transactions (user_id, transaction_id, amount, payment_method)
                VALUES (?, ?, ?, ?)
            ''', (user_id, transaction_id, Config.ACTIVATION_AMOUNT, method))
            db.conn.commit()
            
            await notify_admin(update, context, user_id, transaction_id, method)
            
            await update.message.reply_text(
                "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n\n"
                "‚è≥ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ASAP approve ‡¶ï‡¶∞‡¶¨‡ßá‡¶®"
            )
        else:
            await update.message.reply_text(
                "‚ùå ‡¶è‡¶á ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n\n"
                "‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ì ‡¶¨‡ßà‡¶ß ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®"
            )

def is_valid_transaction(transaction_id):
    cursor = db.conn.cursor()
    cursor.execute("SELECT * FROM transactions WHERE transaction_id = ?", (transaction_id,))
    return cursor.fetchone() is None

async def notify_admin(context, user_id, transaction_id, method):
    from handlers.admin import send_admin_notification
    await send_admin_notification(context, user_id, transaction_id, method)
